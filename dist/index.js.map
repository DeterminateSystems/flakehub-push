{"version":3,"sources":["../ts/index.ts"],"sourcesContent":["import * as actionsCore from \"@actions/core\";\nimport * as actionsExec from \"@actions/exec\";\nimport { ActionOptions, IdsToolbox, inputs } from \"detsys-ts\";\n\nconst EVENT_EXECUTION_FAILURE = \"execution_failure\";\n\nconst VISIBILITY_OPTIONS = [\"public\", \"unlisted\", \"private\"];\n\ntype Visibility = \"public\" | \"unlisted\" | \"private\";\n\ntype ExecutionEnvironment = {\n  FLAKEHUB_PUSH_VISIBILITY?: string;\n  FLAKEHUB_PUSH_TAG?: string;\n  FLAKEHUB_PUSH_HOST?: string;\n  FLAKEHUB_PUSH_LOG_DIRECTIVES?: string;\n  FLAKEHUB_PUSH_LOGGER?: string;\n  FLAKEHUB_PUSH_GITHUB_TOKEN?: string;\n  FLAKEHUB_PUSH_NAME?: string;\n  FLAKEHUB_PUSH_REPOSITORY?: string;\n  FLAKEHUB_PUSH_DIRECTORY?: string;\n  FLAKEHUB_PUSH_GIT_ROOT?: string;\n  FLAKEHUB_PUSH_EXTRA_LABELS?: string;\n  FLAKEHUB_PUSH_SPDX_EXPRESSION?: string;\n  FLAKEHUB_PUSH_ERROR_ON_CONFLICT?: string;\n  FLAKEHUB_PUSH_INCLUDE_OUTPUT_PATHS?: string;\n  FLAKEHUB_PUSH_ROLLING?: string;\n  FLAKEHUB_PUSH_MIRROR?: string;\n  FLAKEHUB_PUSH_ROLLING_MINOR?: string;\n};\n\nclass FlakeHubPushAction {\n  idslib: IdsToolbox;\n\n  // Action inputs translated into environment variables to pass to flakehub-push\n  private visibility: Visibility;\n  private tag: string;\n  private host: string;\n  private logDirectives: string;\n  private logger: string;\n  private gitHubToken: string;\n  private name: string | null;\n  private repository: string;\n  private directory: string;\n  private gitRoot: string;\n  private extraLabels: string;\n  private spdxExpression: string;\n  private errorOnConflict: boolean;\n  private includeOutputPaths: boolean;\n  private rolling: boolean;\n  private mirror: boolean;\n  private rollingMinor: number | null;\n\n  // Other Action inputs\n  private flakeHubPushBinary: string | null;\n\n  constructor() {\n    const options: ActionOptions = {\n      name: \"flakehub-push\",\n      fetchStyle: \"nix-style\",\n      diagnosticsUrl: new URL(\n        \"https://install.determinate.systems/flakehub-push/telemetry\",\n      ),\n      legacySourcePrefix: \"flakehub-push\",\n      requireNix: \"fail\",\n    };\n\n    this.idslib = new IdsToolbox(options);\n\n    // Inputs translated into environment variables for flakehub-push\n    this.visibility = this.determineVisibility();\n    this.tag = inputs.getString(\"tag\");\n    this.host = inputs.getString(\"host\");\n    this.logDirectives = inputs.getString(\"log-directives\");\n    this.logger = inputs.getString(\"logger\");\n    this.gitHubToken = inputs.getString(\"github-token\");\n    this.name = inputs.getStringOrNull(\"name\");\n    this.repository = inputs.getString(\"repository\");\n    this.directory = inputs.getString(\"directory\");\n    this.gitRoot = inputs.getString(\"git-root\");\n    // extra-tags is deprecated but we still honor it\n    this.extraLabels =\n      inputs.getString(\"extra-labels\") === \"\"\n        ? inputs.getString(\"extra-tags\")\n        : \"\";\n    this.spdxExpression = inputs.getString(\"spdx-expression\");\n    this.errorOnConflict = inputs.getBool(\"error-on-conflict\");\n    this.includeOutputPaths = inputs.getBool(\"include-output-paths\");\n    this.rolling = inputs.getBool(\"rolling\");\n    this.mirror = inputs.getBool(\"mirror\");\n    this.rollingMinor = inputs.getNumberOrNull(\"rolling-minor\");\n\n    // Other inputs\n    this.flakeHubPushBinary = inputs.getStringOrNull(\"flakehub-push-binary\");\n  }\n\n  private determineVisibility(): Visibility {\n    const visibility = inputs.getString(\"visibility\");\n    if (!VISIBILITY_OPTIONS.includes(visibility)) {\n      actionsCore.setFailed(\n        `Visibility option \\`${visibility}\\` not recognized. Available options: ${VISIBILITY_OPTIONS.join(\", \")}.`,\n      );\n    }\n    return visibility as Visibility;\n  }\n\n  private async executionEnvironment(): Promise<ExecutionEnvironment> {\n    const env: ExecutionEnvironment = {};\n\n    env.FLAKEHUB_PUSH_VISIBILITY = this.visibility;\n    env.FLAKEHUB_PUSH_TAG = this.tag;\n    env.FLAKEHUB_PUSH_HOST = this.host;\n    env.FLAKEHUB_PUSH_LOG_DIRECTIVES = this.logDirectives;\n    env.FLAKEHUB_PUSH_LOGGER = this.logger;\n    env.FLAKEHUB_PUSH_GITHUB_TOKEN = this.gitHubToken;\n    env.FLAKEHUB_PUSH_NAME = this.flakeName;\n    env.FLAKEHUB_PUSH_REPOSITORY = this.repository;\n    env.FLAKEHUB_PUSH_DIRECTORY = this.directory;\n    env.FLAKEHUB_PUSH_GIT_ROOT = this.gitRoot;\n    // not included: the now-deprecated FLAKEHUB_PUSH_EXTRA_TAGS\n    env.FLAKEHUB_PUSH_EXTRA_LABELS = this.extraLabels;\n    env.FLAKEHUB_PUSH_SPDX_EXPRESSION = this.spdxExpression;\n    env.FLAKEHUB_PUSH_ERROR_ON_CONFLICT = this.errorOnConflict.toString();\n    env.FLAKEHUB_PUSH_INCLUDE_OUTPUT_PATHS = this.includeOutputPaths.toString();\n    env.FLAKEHUB_PUSH_ROLLING = this.rolling.toString();\n    env.FLAKEHUB_PUSH_MIRROR = this.mirror.toString();\n\n    if (this.rollingMinor !== null) {\n      env.FLAKEHUB_PUSH_ROLLING_MINOR = this.rollingMinor.toString();\n    }\n\n    return env;\n  }\n\n  private get flakeName(): string {\n    let name: string;\n\n    const org = process.env[\"GITHUB_REPOSITORY_OWNER\"];\n    const repo = process.env[\"GITHUB_REPOSITORY\"];\n\n    if (this.name !== null) {\n      if (this.name === \"\") {\n        actionsCore.setFailed(\"The `name` field can't be an empty string\");\n      }\n\n      const parts = this.name.split(\"/\");\n\n      if (parts.length === 1 || parts.length > 2) {\n        actionsCore.setFailed(\n          \"The specified `name` must of the form {org}/{repo}\",\n        );\n      }\n\n      const orgName = parts.at(0);\n      const repoName = parts.at(1);\n\n      // Fail on mismatched org names only when *not* mirroring\n      if (orgName !== org && !this.mirror) {\n        actionsCore.setFailed(\n          `The org name \\`${orgName}\\` that you specified using the \\`name\\` input doesn't match the actual org name \\`${org}\\``,\n        );\n      }\n\n      name = `${orgName}/${repoName}`;\n    } else {\n      name = `${org}/${repo}`;\n    }\n\n    return name;\n  }\n\n  async push(): Promise<void> {\n    const executionEnv = await this.executionEnvironment();\n\n    const binary =\n      this.flakeHubPushBinary !== null\n        ? this.flakeHubPushBinary\n        : await this.idslib.fetchExecutable();\n\n    actionsCore.debug(\n      `execution environment: ${JSON.stringify(executionEnv, null, 2)}`,\n    );\n\n    const exitCode = await actionsExec.exec(binary, [], {\n      env: {\n        ...executionEnv,\n        ...process.env, // To get PATH, etc.\n      },\n    });\n\n    if (exitCode !== 0) {\n      this.idslib.recordEvent(EVENT_EXECUTION_FAILURE, {\n        exitCode,\n      });\n      actionsCore.setFailed(`non-zero exit code of ${exitCode} detected`);\n    }\n  }\n}\n\nfunction main(): void {\n  const flakeHubPush = new FlakeHubPushAction();\n\n  flakeHubPush.idslib.onMain(async () => {\n    await flakeHubPush.push();\n  });\n\n  flakeHubPush.idslib.execute();\n}\n\nmain();\n"],"mappings":"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","names":[]}